#!/usr/bin/env python3


def brace_str(n, k):
    t = [ f'%{i}' for i in range(k,k+n) ]
    t = ', '.join(t)
    return '{' + t + '}'

def arr_str(c, s, n):
    t = [ f'"{c}" ({s}[{i}])' for i in range(n) ]
    return ', '.join(t)


# Only signed int4/int8 for now
def generate_mma(b, m, n, k):
    na = (m*k*b) // 1024
    nb = (k*n*b) // 1024
    nc = (m*n*32) // 1024

    print(f'')
    print(f'__device__ __forceinline__')
    print(f'void mma_s{b}_m{m}_n{n}_k{k}(int d[{nc}], int a[{na}], int b[{nb}], int c[{nc}])')
    print(f'{{')
    print(f'    asm("mma.sync.aligned.m{m}n{n}k{k}.row.col.satfinite.s32.s{b}.s{b}.s32 "')
    print(f'        "{brace_str(nc,0)}, "')
    print(f'        "{brace_str(na,nc)}, "')
    print(f'        "{brace_str(nb,nc+na)}, "')
    print(f'        "{brace_str(nc,nc+na+nb)};" :')
    print(f'        {arr_str("=r","d",nc)} :')
    print(f'        {arr_str("r","a",na)},')
    print(f'        {arr_str("r","b",nb)},')
    print(f'        {arr_str("r","c",nc)}')
    print(f'    );')
    print(f'}}')
    print(f'')

    
if __name__ == '__main__':
    print(f'#ifndef _GPUTILS_DEVICE_MMA_HPP')
    print(f'#define _GPUTILS_DEVICE_MMA_HPP')
    print(f'')
    print(f'// Autogenerated by generate_device_mma_hpp.py')
    print(f'//')
    print(f'// Note: For now, we only implement dense, signed int4/int8, saturating (satfinite) MMAs.')
    print(f'//')
    print(f'// Reference for matrix shapes:')
    print(f'//   https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#warp-level-matrix-shape')
    print(f'//')
    print(f'// Reference for PTX instruction syntax:')
    print(f'//   https://docs.nvidia.com/cuda/parallel-thread-execution/index.html#warp-level-matrix-instructions-mma')
    print(f'')
    print(f'namespace gputils {{')
    print(f'')
    
    generate_mma(4, 8, 8, 32)
    generate_mma(4, 16, 8, 32)
    generate_mma(4, 16, 8, 64)

    generate_mma(8, 8, 8, 16)
    generate_mma(8, 16, 8, 16)
    generate_mma(8, 16, 8, 32)
    
    print(f'')
    print(f'}} // namespace gputils')
    print(f'')
    print(f'#endif // _GPUTILS_DEVICE_MMA_HPP')

